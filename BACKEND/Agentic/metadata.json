[
  {
    "file": "src/rough.tsx",
    "lines": "10-182",
    "summary": "This React component, `TopBar`, renders a top navigation bar and handles user authentication and navigation within an application.\n\n**Functionality:**\n\n*   **Navigation:**\n    *   Uses `useNavigate` hook for programmatic navigation, specifically to the `/create-tool` route when the \"Create Tool\" menu item is clicked.\n*   **Menu Items:**\n    *   Displays a menu bar with various icons and labels.\n    *   Menu items include options like \"Add Auth\", \"Your Triggers\", \"Workflow logs\", \"Documentation\", \"Feedback\", \"Plans and Usage\", \"Your Collections\", and \"Create Tool\".\n    *   Clicking \"Create Tool\" navigates the user to the tool creation page.\n    *   Clicking \"Add Auth\" opens an authentication modal, after fetching user auth data.\n*   **Authentication:**\n    *   Uses `useAuth` to retrieve the authentication token.\n    *   Fetches user authentication data from the backend endpoint `/user_auths` using a GET request with the authorization token.  The retrieved data is used to populate the auth modal.\n    *   Manages a modal to display and manage authentication tools.\n    *   Provides a toggle to enable/disable authentication for a specific tool, sending a request to either `/auth` or `/delete_auth` endpoints, and redirects to the third-party auth link in a new tab using `window.open`.\n\n*   **User Interface:**\n    *   Renders a fixed top navigation bar with a menu icon and a set of action icons (based on `menuItems`).\n    *   Conditionally renders an authentication modal (`authModalOpen`) that displays a list of authentication tools with toggle switches.\n    *   The auth modal is styled with a dark background and allows users to manage their enabled/disabled auth tools.\n    *   Displays \"Enabled\" / \"Disabled\" labels next to the toggle switches.\n    *   The modal also includes a \"Close\" button."
  },
  {
    "file": "src/App.tsx",
    "lines": "11-14",
    "summary": "This code snippet defines a constant variable named `CLERK_PUBLISHABLE_KEY`. It's assigned a string value, which is a publishable API key used for authenticating requests to the Clerk backend during development. This key is specific to a testing environment and should be treated as a sensitive piece of information, even though it's marked as `pk_test`."
  },
  {
    "file": "src/App.tsx",
    "lines": "14-110",
    "summary": "This React component, `App`, sets up the main application structure and authentication flow using Clerk. It renders the application's UI based on the user's authentication status.\n\n**Functionality Breakdown:**\n\n*   **Clerk Integration:** The app uses `ClerkProvider` to initialize Clerk authentication, providing a publishable key for client-side operations.\n*   **Authentication State:** The code uses `SignedIn` and `SignedOut` components from Clerk to determine what UI to render based on the user's authentication status.\n*   **Conditional UI for Signed Out Users:** When the user is *not* signed in, the component displays a sign-in page.\n    *   **UI Toggle (Development):** A `useCustomUI` state variable allows developers to easily switch between using a custom-built sign-in form (`CustomSignInForm`) and Clerk's built-in `SignIn` component.\n    *   **Clerk `SignIn` Styling (Customization):** When using the built-in `SignIn` component, the code provides extensive styling customization through the `appearance` prop, defining the layout, color scheme, and typography to match the application's design.\n    *   **Background:** A visually appealing background with gradients and a `ShootingStarsAndStarsBackgroundDemo` component is rendered.\n*   **UI for Signed In Users:** When a user is signed in, the app renders a set of routes using the `Routes` and `Route` components from react-router-dom.\n    *   **Route Protection**: The `MainLayoutWithAuthCheck` component probably serves as a protected route, ensuring that only authenticated users have access to the application's main content.\n    *   **Other Routes**: Contains routes to the `/create-tool`, `/api-keys`, and `/manage-auths` pages.\n*   **UI Toggle Button (Development):** A button is provided for toggling between custom and Clerk's UI during development."
  },
  {
    "file": "src/App.tsx",
    "lines": "110-138",
    "summary": "```javascript\n/**\n * `MainLayoutWithAuthCheck` is a React component that renders the `MainLayout` component.\n * Before rendering, it performs an authentication check using a token retrieved via `useAuth()`.\n *\n * **Functionality:**\n *  1. **Token Retrieval:**  It uses the `useAuth()` hook to securely fetch an authentication token.\n *  2. **Authentication Check:**  It uses the token to make a POST request to the \"/checkuser\" endpoint (assumed to be on \"http://localhost:8000\"). The request includes the token in the \"Authorization\" header as a Bearer token.\n *  3. **Response Handling:**  It parses the JSON response from the server. Logs the response data to the console for debugging purposes.\n *  4. **Error Handling:** It includes a `try...catch` block to handle potential errors during token retrieval, network requests, or response parsing, logging any errors to the console.\n *  5. **Conditional Rendering:** Regardless of the authentication check's outcome, the component unconditionally renders the `MainLayout` component. The result of the authentication check is not used to determine if the main layout is rendered.\n *  6. **Effect Hook:** The authentication check is performed within a `useEffect` hook. The effect runs only when the `getToken` dependency changes. This ensures the check happens whenever the authentication state potentially changes.\n */\nfunction MainLayoutWithAuthCheck() {\n  const { getToken } = useAuth();\n\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        const token = await getToken();\n        const response = await fetch(\"http://localhost:8000/checkuser\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        const data = await response.json();\n        console.log(\"User Check Response:\", data);\n      } catch (error) {\n        console.error(\"Error checking user:\", error);\n      }\n    };\n\n    checkUser();\n  }, [getToken]);\n\n  return <MainLayout />;\n}\n\nexport default App;\n```"
  },
  {
    "file": "src/components/QueryRefiner.tsx",
    "lines": "11-151",
    "summary": "The `QueryRefiner` component displays and allows editing of a refined query string.  It presents the refined query in a read-only format initially, with a prompt to click to edit. Clicking the query transforms it into an editable `textarea`.  The textarea automatically resizes to fit its content, including a minimum height. Editing updates the parent component's `refinedQuery` state via `onChange`. Pressing Enter within the textarea adds a newline and triggers a resize.  Upon losing focus (`onBlur`), the edit mode is exited.  The component also provides \"Copy\" and \"Generate Workflow\" actions. The \"Copy\" button copies the `refinedQuery` to the clipboard, showing a temporary success message. The \"Generate Workflow\" button triggers the `handleGenerateWorkflow` function, and offers a confirmation dialogue before doing so if the workflow is already showing."
  },
  {
    "file": "src/components/WorkflowGraph.tsx",
    "lines": "63-155",
    "summary": "```javascript\n/**\n * Arranges workflow nodes into a hierarchical layout and calculates their screen positions (x, y).\n *\n * @param {Array<object>} workflow An array of workflow node objects. Each node object is expected to have a unique 'id' property and optional 'data_flow_inputs' and 'data_flow_outputs' properties that define data dependencies.\n * @param {object} [trigger] An optional trigger object.  If provided and if its 'output' is defined, this introduces a trigger node and links dependent nodes to it.\n *\n * @returns {Map<string, {x: number, y: number}>} A map where keys are node IDs and values are objects containing the x and y screen coordinates for each node.  Returns an empty map if the input 'workflow' is empty.\n *\n * **Functionality:**\n *\n * 1.  **Dependency Analysis:** Identifies dependencies between nodes based on `data_flow_inputs` and `data_flow_outputs`. A node depends on other nodes if its inputs reference the outputs of those other nodes. Builds `dependencies` and `dependents` maps to track these relationships. Handles the `trigger` as a potential dependency if provided.\n * 2.  **Level Assignment:** Determines the hierarchical level (y-coordinate) of each node using a breadth-first search. Nodes without dependencies (source nodes) are assigned level 0, and subsequent nodes are assigned levels based on their dependencies. The `levels` map stores these level assignments.  The trigger is placed at level 0.\n * 3.  **Position Calculation:** Calculates the x and y screen coordinates for each node based on its level and index within that level.  The x-coordinate evenly spaces nodes at the same level, centering the layout and applying an offset. The y-coordinate is determined by the level, creating vertical spacing. The trigger has a fixed position if present.\n * 4.  **Return Value:** Returns a map containing each node ID as a key and an object with `x` and `y` coordinates representing its position on the screen.\n */\n```"
  },
  {
    "file": "src/components/WorkflowGraph.tsx",
    "lines": "155-285",
    "summary": "This function, `generateNodesAndEdges`, takes a `workflowJson` object and a `handleValueChange` function as input and transforms the workflow data into a format suitable for rendering a visual representation (nodes and edges). It extracts the `workflow`, `trigger`, and `data_flow_notebook_keys` properties from the input JSON.\n\nFirst, it calls the `arrangeNodes` function (implementation not shown) to calculate the positions of the nodes within the visual layout.  Then, it constructs an array of `nodes`. Each node represents an element in the workflow and is enriched with properties like `id`, `type` (\"customNode\"), `position` (determined by `arrangeNodes`), `data` (containing node-specific information like label, tool action, and input/output connectors, and the `handleValueChange` function), and `style` (for visual styling).  A special node representing the trigger is created, with specific styling and information if the trigger is not manual.\n\nFinally, the function constructs an array of `edges`, representing the connections between nodes.  Edges are created based on the `data_flow_inputs` and `data_flow_outputs` properties of the nodes, indicating data flow between nodes. Trigger output connections are also added if relevant data exists. Each edge includes source and target node IDs, a label describing the data flow, and styling information for visual representation (color, width, animation, and label styling). The function returns an object containing the generated `nodes` and `edges` arrays."
  },
  {
    "file": "src/components/WorkflowGraph.tsx",
    "lines": "285-289",
    "summary": "This code snippet defines an object, `nodeTypes`, used to map node identifiers to their corresponding React component implementations.  Specifically, it associates the identifier `customNode` with the React component `CustomNode`. This structure allows for dynamic component rendering based on the node type, crucial for applications involving complex node-based visualizations or graph structures."
  },
  {
    "file": "src/components/WorkflowGraph.tsx",
    "lines": "289-707",
    "summary": "This React component, `WorkflowGraph`, renders and manages a visual workflow diagram using the `reactflow` library.  It allows users to view, edit, save, and run/activate workflows defined in JSON format.\n\n**Key Functionality:**\n\n*   **Initialization:**\n    *   Receives `workflowJson`, `workflows`, and `setWorkflows` props, initializing the visual representation and data.\n    *   Uses `useAuth` hook to retrieve an authentication token.\n    *   Manages loading states (`loading`, `loadingStep`, `loadingProgress`, `bootPhase`, `bootComplete`) for visual feedback during workflow operations.\n    *   Initializes the state for the workflow data (`workflowData`), reflecting the JSON structure of the workflow.\n\n*   **Data Handling and Rendering:**\n    *   Uses `generateNodesAndEdges` (assumed to be an external function) to translate the `workflowData` (JSON) into nodes and edges suitable for `reactflow`.\n    *   Utilizes `useNodesState` and `useEdgesState` hooks to manage the state of the nodes and edges within the graph, providing change handlers.\n    *   Updates the graph based on changes to `workflowJson` using `useEffect` hooks.\n    *   Applies styles for background, minimap, controls, and node/edge rendering.\n\n*   **Workflow Editing:**\n    *   `handleValueChange` function updates the `workflowData` state whenever a node property (value) is changed in the graph. The updated workflow is reflected in the graph.\n    *   It includes special handling for configuration input changes to correctly update the configuration inputs within the `workflowData`.\n    *   Displays a \"Save Changes\" button (`showSaveButton`) when the workflow is modified.\n\n*   **Workflow Saving:**\n    *   `saveWorkflow` function sends the current `workflowData` to a backend API (`/save_workflow`) to save the workflow to the server.\n    *   Uses the authentication token for authorization.\n    *   Displays an alert message to confirm successful saves.\n    *   Fetches the updated workflows using `fetchWorkflows` upon successful save.\n\n*   **Workflow Fetching:**\n    *   `fetchWorkflows` function retrieves a list of workflows from the backend API (`/sidebar_workflows`) and updates the `workflows` state.\n\n*   **Workflow Activation/Deactivation/Run:**\n    *   `runOrActivateWorkflow` function handles the activation, deactivation, or manual execution of the workflow.\n    *   It determines the appropriate API endpoint (`/run_workflow` or `/activate_workflow`) based on the workflow's trigger type.\n    *   Displays a loading overlay with a boot sequence during workflow activation/deactivation, providing progress feedback using `loadingStep`, `loadingProgress`, and `bootPhase`.\n    *   Calls the appropriate API endpoint based on the trigger type:\n        *   If trigger is manual, calls `/run_workflow` to run the workflow.\n        *   Otherwise, calls `/activate_workflow` to activate or deactivate the workflow.\n    *   Updates the workflow data upon successful response from the server.\n    *   Handles errors and navigates to the `/api-keys` page if the user needs to provide API keys.\n\n*   **User Interface:**\n    *   Displays a \"Run Workflow\" button (for manual triggers) or an \"Activate/Deactivate Workflow\" button (for other trigger types).\n    *   Provides a workflow name, editable in-place.\n    *   Integrates with the `reactflow` library to display the interactive workflow graph.\n    *   Includes minimap, zoom controls, and a background."
  },
  {
    "file": "src/components/MainLayout.tsx",
    "lines": "13-757",
    "summary": "```typescript\n// This code defines the main layout component (`MainLayout`) of a chat-based workflow generation application.\n// It manages the UI, user interactions, and communication with a backend API for generating and refining workflows.\n\n// **Key Functionality:**\n\n// 1.  **State Management:** Uses `useState` hooks to manage various aspects of the application's state:\n//     *   `showSidebar`: Controls the visibility of a sidebar.\n//     *   `message`: Stores the user's input message.\n//     *   `chats`: An array of `ChatMessage` objects representing the chat history. Each message has an id, content, sender (\"user\" or \"bot\"), and optional timestamp.\n//     *   `mode`: Switches between \"workflow\" and \"general\" chat modes.\n//     *   `qanda`:  An object storing a series of question and answer pairs in a conversation to refine the query.\n//     *   `questions`: An array of strings, representing a sequence of questions the bot has asked.\n//     *   `currentQuestionIndex`:  Indicates the current question being asked.\n//     *   `refinedQuery`: The refined query after the user answers the bot's questions.\n//     *   `workflowJson`: Stores the JSON representation of the generated workflow.\n//     *   `showWorkflow`: Controls the display of the workflow graph.\n//     *   `loading`: Indicates if the application is currently loading data or generating a workflow.\n//     *   `workflows`: An array of `Workflow` objects fetched from the backend.\n//     *   `currentWorkflow`: The currently selected workflow ID.\n//     *   `loadingStep`: The current step in the workflow generation process.\n//     *   `loadingProgress`: The progress of the workflow generation.\n//     *   `bootPhase`: The current boot sequence phase.\n//     *   `bootComplete`: Whether the boot sequence is complete.\n//     *   `fullScreenWorkflow`: Whether the workflow graph is displayed in full screen mode.\n//     *   `workflowLogs`: Stores the logs emitted from the workflows.\n\n// 2.  **Boot Sequence:**  `bootSequence` array contains a sequence of messages displayed during workflow generation, providing user feedback.\n\n// 3.  **Chat Interaction:**\n//     *   `handleSend`: Handles user messages:\n//         *   Adds user messages to the `chats` array.\n//         *   Displays a \"typing\" indicator for bot responses.\n//         *   Sends the message to the backend API:\n//             *   In \"general\" mode, sends the message directly.\n//             *   In \"workflow\" mode, initiates a question-and-answer process to refine the user's query, then refines the query.\n//         *   Updates the chat with the bot's response.\n//     *   `handleQueryUpdate`: Handles updates to the query.\n//     *   `sendRefinedQuery`: Sends the refined query to the backend.\n//     *   `handleModeChange`: Switches between \"workflow\" and \"general\" modes.\n//     *   `handleNewChatClick`: Clears the chat history and resets the application state, starting a new conversation.\n\n// 4.  **Workflow Management:**\n//     *   `fetchWorkflows`: Fetches the list of available workflows from the backend.\n//     *   `handleGenerateWorkflow`: Triggers the workflow generation process:\n//         *   Displays the boot sequence and progress indicator.\n//         *   Calls the backend API to generate the workflow using the refined query.\n//         *   Updates the `workflowJson` and `showWorkflow` states.\n\n// 5.  **UI Rendering:**\n//     *   Conditionally renders UI elements based on the application's state:\n//         *   A loading overlay during workflow generation.\n//         *   A top bar with menu and new chat options.\n//         *   A sidebar for navigation and workflow selection.\n//         *   A chat interface displaying the chat history.\n//         *   A query refiner component for editing the user query.\n//         *   A workflow graph to visualize the generated workflow.\n//         *   A message input component for sending messages.\n//     *  The component uses a custom hook `useWorkflowLogs` which connects to a websocket that receives workflow logs.\n//     *   Logs are formatted and displayed in the chat panel along with workflow id matching.\n//     *   The app uses a helper function `renderObjectValue` to properly format and display the values from the logs.\n\n// 6.  **Data Fetching:**\n//     *   Uses `fetch` to interact with the backend API for:\n//         *   Sending user messages.\n//         *   Refining queries.\n//         *   Generating workflows.\n//         *   Fetching workflow list.\n\n// 7.  **Authentication:**  Uses the `useAuth` hook to retrieve a user token for API authentication.\n\n// 8. **Effect Hooks:** `useEffect` to call `fetchWorkflows` on component mount.\n```"
  },
  {
    "file": "src/components/ManageAuth.tsx",
    "lines": "21-34",
    "summary": "This code defines a constant array, `AUTH_SERVICES`, listing the names of supported authentication services. It includes popular platforms like Gmail, Notion, YouTube, LinkedIn, Google Calendar, Google Docs, Google Sheets, and Google Meet, as well as a \"Gmail Trigger\" option, likely for a specific integration.  The comment \"// Service icon mapping\" indicates that subsequent code will probably use these service names to associate them with visual icons."
  },
  {
    "file": "src/components/ManageAuth.tsx",
    "lines": "34-47",
    "summary": "This code defines a constant object, `SERVICE_ICONS`, which acts as a lookup table for service icons.  Each key in the object represents a service name (e.g., \"Gmail\", \"Notion\") and the corresponding value is a React component representing the icon for that service. The icons are styled using a consistent `service-icon` class and service-specific classes (e.g., `gmail`, `notion`).  The size of each icon is uniformly set to 40. It is used to visually represent various integrated services within the application's user interface."
  },
  {
    "file": "src/components/ManageAuth.tsx",
    "lines": "47-54",
    "summary": "This code defines a constant object `API_KEY_URLS` that stores URLs pointing to the locations where users can manage their API keys for various services.  Specifically, it maps:\n\n*   `openai`: to the OpenAI API key portal.\n*   `gemini`: to the Google AI Studio API key section for Gemini keys.\n*   `composio`: to the Composio developers dashboard.\n\nThe object is intended to provide direct links to resources needed for retrieving and managing API keys for integrations."
  },
  {
    "file": "src/components/ManageAuth.tsx",
    "lines": "54-563",
    "summary": "This React component, `ManageAuth`, allows users to manage authentication and API keys for various services. It displays a form to input API keys (OpenAI, Gemini, and Composio) and a table showing the connection status of supported services.\n\n**Key Features:**\n\n*   **API Key Management:**\n    *   Displays input fields for different API keys, with labels and tooltips.\n    *   Provides a \"Get Key\" button, that redirects the user to the API key creation page.\n    *   Allows users to toggle password visibility and copy API keys to the clipboard.\n    *   Validates API keys, specifically for Composio and OpenAI, before saving.\n    *   Saves API keys to a backend API endpoint and stores them using localStorage.\n*   **Authentication Status:**\n    *   Fetches authentication status from a backend API.\n    *   Displays the status of connected services in a table, allowing users to connect/disconnect services.\n    *   Implements a toggle switch to enable/disable authentication for each service.\n    *   Uses caching with localStorage to store and retrieve authentication data.\n    *   Provides a reload button to refresh authentication status.\n*   **User Interface:**\n    *   Uses `ToastContainer` for displaying notifications (success, error, info).\n    *   Includes a TopBar component (with New Chat button hidden) and provides basic layout styling.\n    *   Provides feedback to the user, including loading indicators and error messages.\n    *   Handles redirects to external API key pages.\n\n**Internal workings:**\n\n*   Uses React's `useState` and `useEffect` hooks to manage component state, API key values, and loading statuses.\n*   Uses `useAuth` hook to retrieve the authentication token.\n*   Fetches authentication data from the backend API endpoint `/user_auths` using the token.\n*   Handles authentication toggle requests by sending POST requests to `/auth` or `/delete_auth` endpoints.\n*   Employs error handling and feedback to inform the user of authentication status.\n*   Uses `localStorage` to cache authentication data, reducing unnecessary API calls."
  },
  {
    "file": "src/components/FetchLogs.tsx",
    "lines": "70-103",
    "summary": "The `FetchLogs` component is a React functional component responsible for displaying workflow logs. It leverages a custom hook, `useWorkflowLogs`, to subscribe to a stream of log messages.\n\n**Functionality:**\n\n1.  **State Management:** It uses the `useState` hook to manage an array of `LogMessage` objects, initialized as an empty array. This state, named `logs`, stores the received log entries.\n2.  **Log Subscription:**  The `useWorkflowLogs` hook is called. This hook presumably registers a callback function which is executed whenever a new log message is received.  The callback function appends the new `log` message to the `logs` array using the functional update form of `setLogs` to safely update the state by creating a new array with the existing logs and the new log message using the spread operator.\n3.  **Rendering (Commented Out):**  The commented-out JSX would display the collected logs in a formatted manner. It iterates through the `logs` array and renders each `LogMessage`'s properties (timestamp, workflow ID, node, agent name, status, and data) in a readable format.  It includes a scrollable container to handle a large number of log entries. A message is displayed if no logs are available.\n4.  **Empty Rendering (Active):** Currently, the component renders an empty `div`.  This indicates that while the data fetching is active, the log messages are not being displayed."
  },
  {
    "file": "src/components/MessageInput.tsx",
    "lines": "14-143",
    "summary": "The `MessageInput` component provides a rich text input field for sending messages, including features like automatic resizing, placeholder animations, and a send button. It integrates with an optional voice input and workflow features.\n\n**Key Features:**\n\n*   **Text Input:** A `textarea` for composing messages, allowing for multiline input with Shift+Enter.\n*   **Auto-Resizing:** The textarea automatically adjusts its height to fit the content, with a minimum height of 56px and a maximum height of 150px.\n*   **Placeholder Animation:**  A rotating placeholder text is displayed when the input is empty, cycling through a list of example suggestions. The animation pauses when a message is entered, or when the page loses visibility (e.g., switching tabs).\n*   **Send Button:** A send button is displayed, disabled when the input is empty. Clicking the send button triggers either `handleSend` or, if `showWorkflow` is true and `handleQueryUpdate` is provided, calls `handleQueryUpdate` with the message text.\n*   **Voice Input (Optional):** An optional microphone icon provides a placeholder for voice input functionality. It calls `onMicClick` if provided, or shows an alert if not.\n*   **Workflow Integration (Optional):** The component supports integration with a workflow system if `showWorkflow` is true and a `handleQueryUpdate` function is provided. In this case, clicking send button will trigger `handleQueryUpdate` instead of `handleSend`.\n*   **Responsiveness:** Includes styling for better look and feel with rounded corners, appropriate padding, and hover effects for buttons."
  },
  {
    "file": "src/components/AnimatedMessageInput.tsx",
    "lines": "16-202",
    "summary": "This React component, `AnimatedMessageInput`, provides a rich text input field with animated placeholder text, auto-resizing, and send/voice input functionalities.\n\n**Key Features:**\n\n*   **Animated Placeholders:** Displays a rotating list of placeholder messages when the input is empty and not focused.  The animation pauses when the input is focused or the user types in a message. Resumes upon visibility changes (e.g., tab switching).\n*   **Auto-Resizing Textarea:** Automatically adjusts the height of the input field to accommodate the text entered, up to a maximum height of 200px.\n*   **Send Button with Conditional Behavior:** The send button is enabled only when the input field contains text. Clicking the send button calls either `handleSend` (if `showWorkflow` is false or `handleQueryUpdate` is not provided) or `handleQueryUpdate` (if `showWorkflow` is true and `handleQueryUpdate` is provided), using the input message.\n*   **Voice Input:** Includes a microphone icon that, when clicked, invokes the `onMicClick` callback, providing a placeholder alert if no callback is provided.\n*   **Keyboard Handling:** Handles \"Enter\" key presses to trigger the send functionality. Shift+Enter allows creating a new line in the text area.\n*   **Disabled State:**  The input and send button can be disabled using the `isDisabled` prop, changing their appearance and preventing interaction.\n*   **Focus Management:**  Tracks and manages focus state to control placeholder visibility and visual styles.\n*   **Placeholder Prop:** Allows the user to change the placeholder text in the text input."
  },
  {
    "file": "src/components/CustomNode.tsx",
    "lines": "46-656",
    "summary": "```typescript\n/**\n * Represents a custom React component for rendering and interacting with nodes within a visual workflow.\n * This component dynamically renders different UI elements based on the node's data, including configuration inputs, LLM prompts, and file upload/deletion features.\n * It also provides UI elements for expansion and styling.\n *\n * **Functionality:**\n *  - **Input Handling:** Handles changes to configuration inputs and LLM prompts by calling `handleValueChange` prop.\n *  - **File Upload:** Enables file uploads via a hidden input field, sending files to a backend endpoint (`/file_upload`) and storing the S3 file location.  Updates the configuration input with the file name and location.\n *  - **File Deletion:** Allows deletion of uploaded files by sending a request to a backend endpoint (`/file_delete`). It also removes the corresponding file from the node's configuration inputs.\n *  - **Text Area Expansion:** Provides the ability to expand and collapse text areas for LLM prompts and config inputs.\n *  - **Text Size Categories:** Calculates and applies a text size category (\"small\", \"medium\", \"large\") for text areas based on their content length.\n *  - **Dynamic Rendering:** Renders different icons based on the node's label (e.g., file upload, Google Sheets, Gmail, etc.).\n *  - **UI Styling:** Applies styles based on the node type (\"llm\", \"connector\", \"tool\") and other properties.\n *  - **Tooltips:** Provides a tooltip with node ID, type, and description.\n *  - **Execution Mark:** Displays an execution mark with the name of the connector if `to_execute` is present.\n *\n * **Props:**\n * @param data - The node's data, including:\n *   - `id`: Unique identifier for the node.\n *   - `label`:  Node's label (string or JSX.Element). Used for display and icon selection.\n *   - `type`:  The type of node (e.g., \"llm\", \"connector\", \"tool\").\n *   - `description`: Descriptive text for the node.\n *   - `config_inputs`: An object containing configuration input key-value pairs.\n *   - `llm_prompt`: The LLM prompt text.\n *   - `validation_prompt`: The validation prompt text.\n *   - `tool_action`: A string describing a tool action.\n *   - `handleValueChange`: A function to handle changes to the node's values. (Required)\n *   - `to_execute`: Flag to check if node is ready for execution\n *   - `connectorName`: The name of the connector\n *\n *  **State:**\n *   - `expandedField`: Tracks which text area is currently expanded (string | null).\n *   - `textSizeCategory`:  An object storing text size categories for each field (e.g., \"small\", \"medium\", \"large\").\n */\nconst CustomNode: React.FC<CustomNodeProps> = ({ data }) => {\n  // ... (implementation as described above)\n};\n\nexport default CustomNode;\n```"
  },
  {
    "file": "src/components/ChatInterface.tsx",
    "lines": "25-128",
    "summary": "The `ChatInterface` component is a UI element that displays and manages a chat conversation. It renders differently based on whether there are any existing chat messages (`chats` array is empty) or if the \"workflow\" mode is active.\n\n**When no chats exist and workflow mode is not active (initial state):**\n\n*   **Background:** Shows a background effect (`BackgroundBeamsWithCollisionDemo`).\n*   **Mode Selection:** Presents two buttons to switch between \"Create Workflow\" and \"General Query\" modes.  The active mode is highlighted.  Clicking a button triggers `handleModeChange` function.\n*   **Input:** Displays a `VanishingMessageInput` component for typing and sending messages.\n*   **Example Prompts:** If provided, displays a list of example prompts as clickable buttons, which populate the input field when clicked.\n\n**When chats exist or workflow mode is active:**\n\n*   **Chat Display:** Renders a list of chat messages (`chats`). Each message is displayed within a styled container, with user messages right-aligned and AI messages left-aligned, distinguished by background color and text color based on the `sender` property (\"user\" or otherwise)."
  },
  {
    "file": "src/components/BeamTest.tsx",
    "lines": "4-54",
    "summary": "This React component, `BeamTest`, renders a full-screen, visually engaging experience. It creates a dark gray background and utilizes the `BackgroundBeamsWithCollision` component to display animated beams, likely with a collision detection mechanism for interactivity or visual effects.  Overlaid on top of the animated beams, a centered heading \"BEAM TEST\" appears in large, light gray text. Below the heading,  a second line of text \"Colorful Animated Beams\" is rendered using a colorful gradient background to simulate text with a color effect. Both headings are centered and positioned in the middle of the screen vertically and horizontally using `absolute` positioning and `transform: translate` for precise centering. The `zIndex` property ensures the text elements are above the background beams."
  },
  {
    "file": "src/components/TopBar.tsx",
    "lines": "30-141",
    "summary": "This code defines a React component, `TopBar`, that renders a top navigation bar. The bar contains several interactive elements:\n\n*   **Menu Toggle:** A button (represented by a `Menu` icon) that triggers a side menu when clicked, using the `onMenuClick` prop.\n*   **Home Button:**  A button (with a `Home` icon) that navigates the user to the home screen, controlled by the `onHomeClick` prop. This button is only displayed on larger screens.\n*   **New Chat Button:** A button (with a `PlusCircle` icon) that initiates a new chat, activated by the `onNewChatClick` prop. It's visible only when the sidebar is closed and `hideNewChat` is not set.  This button is also only displayed on larger screens.\n*   **Workflow Name Display:** Displays the currently active workflow name,  and includes an animation (`workflow-badge-pulse`) when the workflow changes. This utilizes a `Activity` icon.\n*   **Navigation Buttons:** Displays a set of icon buttons using the `menuItems` array. Clicking \"Add Auth\" navigates to the `/manage-auths` route. Clicking \"Create Tool\" navigates to the `/create-tool` route. The other items do nothing on click.\n\nThe top bar is fixed to the top of the screen and is styled with a dark background and a border. It uses the `useNavigate` hook for route navigation and `useEffect` to manage the animation of the workflow name display."
  },
  {
    "file": "src/components/VanishingMessageInput.jsx",
    "lines": "5-492",
    "summary": "This React component, `VanishingMessageInput`, provides a text input field with a \"vanishing\" effect when the user submits a message. It includes features such as:\n\n*   **Placeholder Animation:** Displays rotating placeholder text within the input field when it's empty and not focused.\n*   **Textarea Autosizing:** Automatically adjusts the height of the input textarea to fit its content, with a maximum height.\n*   **Vanishing Animation:**  When a message is submitted (via Enter key or the send button), the text visually \"vanishes\" through an animated effect drawn on a canvas element.  The animation involves drawing the text on a canvas, extracting pixel data, and then animating the pixels to disappear.  After the animation completes, the message is cleared.\n*   **Message Submission Handling:** Submits the message using a `handleSend` function passed as a prop, or conditionally uses a `handleQueryUpdate` function if `showWorkflow` is true, likely integrating with a workflow system.\n*   **Disabled State:**  The input and send button can be disabled via the `isDisabled` prop.\n*   **Voice Input:** Integrates speech recognition using the browser's SpeechRecognition API for voice input, allowing users to dictate messages. It handles both final and interim results.\n*   **Focus and Blur States:** Applies visual styling based on whether the input is focused.\n*   **Cursor Position Tracking:** Tracks cursor position in the text input field to properly support voice input and other text manipulations.\n*   **Input is designed to be a single line input.**\n*   **Responsiveness:** The component adapts its design to different screen sizes.\n*   **Keypress handling:** Includes a conditional handling for the Enter key.\n*   **Placeholder**: The text input utilizes a placeholder for instructional purposes.\n*   **Mic Button**: Includes a mic button.\n\nThe component receives several props: `message` and `setMessage` (for the input's text content), `handleSend` (to submit the message), `placeholder` (the default placeholder text), `onMicClick` (for custom mic button handling), `showWorkflow` and `handleQueryUpdate` (for workflow integration), and `isDisabled` (to disable the input)."
  },
  {
    "file": "src/components/ui/background-beams-with-collision.tsx",
    "lines": "100-233",
    "summary": "This React component, `CollisionMechanism`, simulates a collision effect triggered by a falling \"beam\" element.  It utilizes `motion.div` from `framer-motion` for animation and `AnimatePresence` to handle the explosion effect upon collision.\n\n**Functionality:**\n\n1.  **Beam Animation:**  A vertical \"beam\" is rendered, styled as a gradient line.  It is positioned absolutely and animated to fall from an initial top position to the bottom, looping indefinitely. Animation properties (initial position, final position, duration, delay, etc.) are configurable via the `beamOptions` prop.\n2.  **Collision Detection:** Uses `useEffect` and `setInterval` to continuously check for a collision between the beam's bottom edge and the top of a container element, and also uses the parent's element to determine relative position of the collision. The `parentRef` and `containerRef` props must be attached to the relevant DOM elements.  Once collision is detected, `collision.detected` will be set to `true` and the component will update the state of the `cycleCollisionDetected` variable.\n3.  **Explosion Effect:** Upon collision detection, an `Explosion` component (assumed to be a separate component) is rendered at the point of impact, indicated by the `coordinates` state.\n4.  **Collision Reset:** After 2 seconds, the component resets the collision state, stopping the explosion effect and restarting the cycle to detect the next collision. The `beamKey` state is updated to re-render the beam.\n\n**Props:**\n\n*   `containerRef`:  A React ref object attached to the container element. The component uses this to determine collision.\n*   `parentRef`: A React ref object attached to the parent element of the beam and the container. The component uses this to determine the relative coordinates of the explosion.\n*   `beamOptions`: Optional object to customize beam animation. Properties include:\n    *   `initialX`: Initial X position of the beam.\n    *   `translateX`: Final X position of the beam.\n    *   `initialY`: Initial Y position of the beam.\n    *   `translateY`: Final Y position of the beam.\n    *   `rotate`: Rotation of the beam.\n    *   `className`: Optional CSS class for the beam.\n    *   `duration`: Animation duration.\n    *   `delay`: Animation delay.\n    *   `repeatDelay`: Delay before repeating animation.\n\n**Internals:**\n\n*   `beamRef`:  A React ref attached to the beam element.\n*   `collision`:  State object tracking whether a collision has been detected and the coordinates.\n*   `beamKey`: State variable to force re-render of the beam.\n*   `cycleCollisionDetected`: A variable to control the interval function that sets the state for collision detection."
  },
  {
    "file": "src/components/ui/background-beams-with-collision.tsx",
    "lines": "233-284",
    "summary": "```typescript\n/**\n * `Explosion` Component\n *\n * Renders an animated explosion effect. This component uses `motion.div` and `motion.span`\n * from the `framer-motion` library to create a visually appealing explosion animation.  It is designed\n * to be positioned absolutely.\n *\n * **Functionality:**\n *\n * 1.  **Initial Setup:**\n *     *   Generates an array of 20 \"spans\" with randomized initial directions and velocities.  Each span\n *         is an object containing an `id`, `initialX`, `initialY`, `directionX`, and `directionY`.\n *\n * 2.  **Main Div (Container):**\n *     *   The root `div` is an absolute-positioned container with a `z-index` of 50, intended to sit on top of other elements.\n *     *   It accepts standard HTML attributes via `props` to facilitate styling and customization, including the `className` prop.\n *\n * 3.  **Central Flash Effect:**\n *     *   A `motion.div` creates a central flash effect.\n *     *   It uses a linear gradient for a bright color.\n *     *   Employs `framer-motion` to animate its opacity.  It fades in, remains visible, and fades out.\n *\n * 4.  **Particle Effects (Spans):**\n *     *   Maps over the generated `spans` array to render a set of animated particles (`motion.span` elements).\n *     *   Each span is styled with a gradient background and rounded corners.\n *     *   Employs `framer-motion` to animate each span's position (x and y coordinates) and opacity, creating an outward and fading effect.\n *     *   Each span's animation duration is randomized, adding variety to the effect.\n */\n```"
  },
  {
    "file": "src/components/ui/custom-signin-form.tsx",
    "lines": "251-260",
    "summary": "```typescript\n/**\n *  Displays a bottom gradient effect, typically used as an interactive visual cue on a button.\n *\n *  This component renders two horizontal gradient spans positioned at the bottom of its parent.\n *  The first gradient spans the full width of the parent, while the second spans half the width, centered, and slightly blurred.\n *  Both gradients transition from transparent to a vibrant color and back to transparent on hover of an element with the `group-hover/btn` class prefix.\n *  This creates a dynamic visual effect where the gradients become visible when the element is hovered, enhancing the user experience.\n */\nconst BottomGradient = () => {\n  return (\n    <>\n      {/* Full-width, non-blurred cyan gradient; initial opacity 0, becomes 100 on group hover */}\n      <span className=\"absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-cyan-500 to-transparent opacity-0 transition duration-500 group-hover/btn:opacity-100\" />\n\n      {/* Half-width, blurred blue gradient; initial opacity 0, becomes 100 on group hover */}\n      <span className=\"absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-blue-500 to-transparent opacity-0 blur-sm transition duration-500 group-hover/btn:opacity-100\" />\n    </>\n  );\n};\n```"
  },
  {
    "file": "src/components/ui/custom-signin-form.tsx",
    "lines": "260-273",
    "summary": "The `LabelInputContainer` component provides a flexible container for label-input pairs or related form elements. It utilizes a `div` with the following characteristics:\n\n*   **Layout:**  Uses `flex` and `flex-col` to arrange its children vertically, effectively stacking them.\n*   **Spacing:** Adds spacing of `1.5` units between its child elements using `space-y-1.5`.\n*   **Width:**  Takes up the full available width with `w-full`.\n*   **Customization:** Accepts a `className` prop for optional styling, allowing further customization of the container's appearance.\n*   **Content:** Accepts any valid React nodes as `children`, making it versatile for housing various form elements like labels, inputs, and helper text."
  },
  {
    "file": "src/components/ui/shooting-stars.tsx",
    "lines": "27-148",
    "summary": "## Documentation Summary:\n\nThis React component, `ShootingStars`, renders animated shooting stars across the screen.\n\n**`getRandomStartPoint()`:**  This function determines the starting position and initial angle of a shooting star.  It randomly selects a side of the screen (top, right, bottom, or left) and a horizontal/vertical offset along that side. The returned object provides the `x` and `y` coordinates of the starting point, along with the `angle` of the star's trajectory (45, 135, 225, or 315 degrees).\n\n**`ShootingStars` Component:**\n\n*   **Props:** Accepts various props to customize the stars:\n    *   `minSpeed` and `maxSpeed`:  Define the range for the star's speed.\n    *   `minDelay` and `maxDelay`:  Define the range for the time delay between star creations.\n    *   `starColor`:  Sets the color of the star's head.\n    *   `trailColor`: Sets the color of the star's trail.\n    *   `starWidth`: Specifies the width of the star.\n    *   `starHeight`: Specifies the height of the star.\n    *   `className`: Allows for additional CSS classes.\n*   **State (`star`):**  Manages the current shooting star's data (position, angle, speed, etc.).  `null` if no star is active.\n*   **`svgRef`:** A reference to the SVG element.\n*   **`useEffect` (Star Creation):**  Generates new shooting stars.\n    *   Uses `getRandomStartPoint()` to calculate the initial position and angle.\n    *   Creates a new `ShootingStar` object with random speed, and a unique id based on timestamp.\n    *   Sets the new star data to the component's state.\n    *   Uses `setTimeout` to schedule the creation of another star after a random delay.\n*   **`useEffect` (Star Movement):**  Animates the shooting star's movement.\n    *   Updates the star's `x`, `y`, and `scale` positions based on its speed, angle, and distance traveled.\n    *   If a star moves off-screen, it is removed by setting the `star` state to `null`.\n    *   Uses `requestAnimationFrame` for smooth animation.\n*   **JSX:** Renders an SVG element that contains:\n    *   A `<rect>` element representing the current shooting star. The rectangle's properties (position, size, rotation, fill) are dynamically updated based on the star's state.\n    *   A `<linearGradient>` definition with a gradient color that is applied as the star's fill, creating the star's visual trail effect."
  }
]